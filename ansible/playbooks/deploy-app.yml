---
- name: Deploy Node.js application
  hosts: app_servers
  vars:
    build_number: "{{ build_number | default('latest') }}"
    app_name: "nodejs-app"
    app_user: "ec2-user"
    app_group: "ec2-user"
    app_port: "3000"
    nexus_url: "http://16.171.2.18:8081/nexus/content/sites/node-app-releases"
  
  tasks:
    - name: Debug build number
      debug:
        msg: "Deploying build number: {{ build_number }}"

    - name: Find latest build if 'latest' is specified
      shell: |
        # Get the latest build number from Nexus or available files
        curl -s http://16.171.2.18:8081/nexus/content/sites/node-app-releases/ | \
        grep -o 'app-[0-9]*\.zip' | \
        sed 's/app-\([0-9]*\)\.zip/\1/' | \
        sort -n | \
        tail -1
      register: latest_build
      when: build_number == "latest"
      changed_when: false

    - name: Set actual build number
      set_fact:
        actual_build_number: "{{ latest_build.stdout if build_number == 'latest' else build_number }}"
    
    - name: Display actual build number being deployed
      debug:
        msg: "Actual build number to deploy: {{ actual_build_number }}"

    - name: Install required packages
      package:
        name:
          - net-tools
          - unzip
          - nodejs
          - npm
        state: present
      when: ansible_os_family == "RedHat"

    - name: Stop any existing application
      shell: "pkill -f 'node.*index.js' || true"
      ignore_errors: yes

    - name: Clean app directory
      file:
        path: "/opt/{{ app_name }}"
        state: absent
      ignore_errors: yes

    - name: Create app directory
      file:
        path: "/opt/{{ app_name }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Download application artifact from Nexus
      get_url:
        url: "{{ nexus_url }}/app-{{ actual_build_number }}.zip"
        dest: "/tmp/app-{{ actual_build_number }}.zip"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"

    - name: Check if zip file exists and has content
      stat:
        path: "/tmp/app-{{ actual_build_number }}.zip"
      register: zip_file

    - name: Fail if zip file doesn't exist
      fail:
        msg: "Zip file app-{{ actual_build_number }}.zip not found in Nexus"
      when: not zip_file.stat.exists

    - name: Extract application
      unarchive:
        src: "/tmp/app-{{ actual_build_number }}.zip"
        dest: "/opt/{{ app_name }}"
        remote_src: yes
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: List extracted files for verification
      shell: "ls -la /opt/{{ app_name }}/"
      register: extracted_files

    - name: Show extracted files
      debug:
        msg: "Extracted files: {{ extracted_files.stdout }}"

    - name: Check if application entry point exists
      stat:
        path: "/opt/{{ app_name }}/index.js"
      register: app_entry

    - name: Fail if index.js not found
      fail:
        msg: "index.js not found in extracted files. Check build process."
      when: not app_entry.stat.exists

    - name: Install dependencies
      npm:
        path: "/opt/{{ app_name }}"
        state: present

    - name: Install pm2 process manager
      npm:
        name: pm2
        global: yes
        state: present

    - name: Create PM2 ecosystem config
      template:
        src: "ecosystem.config.js.j2"
        dest: "/opt/{{ app_name }}/ecosystem.config.js"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'

    - name: Ensure app is running with PM2
      shell: |
        cd /opt/{{ app_name }}
        pm2 delete {{ app_name }} || true
        pm2 start ecosystem.config.js
        pm2 save
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
      args:
        chdir: "/opt/{{ app_name }}"

    - name: Setup PM2 startup script
      shell: "pm2 startup systemd -u {{ app_user }} --hp /home/{{ app_user }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Save PM2 process list
      shell: "pm2 save"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"

    - name: Wait for application to start
      wait_for:
        port: "{{ app_port }}"
        host: "0.0.0.0"
        delay: 5
        timeout: 30

    - name: Verify application is running
      shell: "netstat -tln | grep :{{ app_port }} || ss -tln | grep :{{ app_port }}"
      register: app_status

    - name: Test application endpoint
      uri:
        url: "http://localhost:{{ app_port }}/"
        method: GET
        status_code: 200
      register: app_test
      ignore_errors: yes

    - name: Display deployment result
      debug:
        msg: |
          ‚úÖ Application deployed successfully!
          üì¶ Build: {{ actual_build_number }}
          üåê Port status: {{ app_status.stdout }}
          üß™ Health check: {{ app_test.status }}
          üîó Access URL: http://13.60.92.125:{{ app_port }}/

  handlers:
    - name: restart nodejs app
      shell: |
        cd /opt/{{ app_name }}
        pm2 restart {{ app_name }}
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
      args:
        chdir: "/opt/{{ app_name }}"
